* HuiBoard

HuiBoard is a five or ten key keyboard that is one possible implimentation of the ET Language. You can think of ET Language as a binary sign language that allows you to type. The system is designed to be mnemonic, fast, efficient, powerful, ergonomic, and easy to learn.

HuiBoard is powered by Common Lisp and Arduino. You can easily make your own HuiBoard, or buy one from our custom keyboard shop.

See http://huiboard.com for more details and documentation on how to use HuiBoard.

Currently in early prototype stage, but quite useable and powerful. Feedback is very welcome! huiboard-at-gmail-com

* Installation
** Linux
Currently tested on Ubuntu 14.04 using SBCL. Currently the cl-serial dependency requires SBCL. It should work on any system where xdotool can send keystrokes. Windows, Mac, and Android later if there is interest.

You'll need SBCL, Quicklisp, xdotool, and cl-serial to get started. The first three are installable using apt-get.

#+BEGIN_SRC sh
sudo apt-get install sbcl cl-quicklisp xdotool
#+END_SRC

Clone both cl-serial and this repository into your quicklisp/local-projects folder.

Get cl-serial here: https://github.com/shamazmazum/cl-serial

** Arduino
To set up the Arduino you'll need the Arduino IDE, or your preferred method of flashing.
* Setup
From the SBCL REPL run
#+BEGIN_SRC lisp
(ql:register-local-projects)
#+END_SRC
so Quicklisp can find cl-serial and HuiBoard.

The HuiBoard Manager package is named :huim. Load it with Quicklisp:

#+BEGIN_SRC lisp
(ql:quickload :huim)
#+END_SRC

Then make sure the \star{}serial-port-path\star{} variable points to your Arduino tty file. It should be listed in your /dev folder under the name ttyUSB0 or ttyACM0, possibly with different numbers.

#+BEGIN_SRC lisp
(setf huim:*serial-port-path* #P"/dev/ttyACM0")
#+END_SRC

The other variable you may need to customize is \star{}dictionary-file-path\star{} which is #P"/usr/share/dict/american-english" on Ubuntu 14.04, other versions of Linux may be different.

#+BEGIN_SRC lisp
(setf huim:*dictionary-file-path* #P"/location/of/your/dictionary/file")
#+END_SRC
* Running
There are then two options for starting the main loop. On a BeagleBone or Rasberry Pi (ARM processors), SBCL is not threaded, so run:

#+BEGIN_SRC lisp
(huim:main-loop)
#+END_SRC

If you want to use HuiBoard with Emacs and SLIME, or just run it as a background thread so you can still use the Lisp REPL - use Bordeaux Threads:

#+BEGIN_SRC lisp
(ql:quickload :bordeaux-threads)
(bt:make-thread 'huim:main-loop :name "huim")
#+END_SRC


Type away!

Feedback and suggestions to huiboard-at-gmail-com.

#+BEGIN_HTML
<table align="center">
  <tbody>
    <tr>
      <td>

	<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
	  <input type="hidden" name="cmd" value="_s-xclick">
	  <input type="hidden" name="hosted_button_id" value="THHZ8QEPRB7MC">
	  <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
	  <img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
	</form>
	
      </td>
    </tr>
  </tbody>
</table>
#+END_HTML
